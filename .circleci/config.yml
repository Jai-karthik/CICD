version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  aws-cli: circleci/aws-cli@2.0.0
  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build 
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
    #   # Docker image here that supports AWS CLI
    #   - image: circleci/aws-cli:2.0.0
      - image: cimg/base:2020.01

    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name backendstack \
              --parameter-overrides ID="90033"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name frontendstack \
              --parameter-overrides ID="90033"
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
     # Here's where you will add some code to rollback on failure   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b0:d6:d3:93:d8:d8:c4:4c:77:14:e9:92:85:f3:d3:ad"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt playbook.yml
      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            sudo npm install
            npm audit fix --audit-level=critical --force
            npm run build
            sudo npm run migrations > migration.log
            cat migration.log
            migration_succesful=$(cat migration.log | grep -c "has been executed successfully")
            if [ $migration_succesful > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: << memstash-token >>" \
              --request PUT --data "1" \
              https://api.memstash.io/values/ #URL incomplete
            
     # Here's where you will add some code to rollback on failure    
  deploy-frontend:
    docker:
      
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
      - run:
          name: Get backend url
          command: |
            # your code here
            #take from inventory file - export BACKEND_IP=$inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - aws-cli/setup
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp --recursive frontend/dist "s3://udapeople-${ID}"


      # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure 

  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
